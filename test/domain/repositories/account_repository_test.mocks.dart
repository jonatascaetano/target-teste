// Mocks generated by Mockito 5.4.3 from annotations
// in teste_tecnico_target/test/domain/repositories/account_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teste_tecnico_target/data/datasources/data_datasource.dart'
    as _i5;
import 'package:teste_tecnico_target/domain/entities/user_entity.dart' as _i6;
import 'package:teste_tecnico_target/domain/repositories/account_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i3.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> createAccount(
          _i6.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [user],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #createAccount,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity?>> getSavedUser(
          String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedUser,
          [username],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity?>>.value(
            _FakeEither_0<_i5.Failure, _i6.UserEntity?>(
          this,
          Invocation.method(
            #getSavedUser,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> logout(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [username],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logout,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
